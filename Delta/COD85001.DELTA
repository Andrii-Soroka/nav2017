OBJECT Codeunit 85001 JSon Function Library
{
  OBJECT-PROPERTIES
  {
    Date=24.10.16;
    Time=09:30:27;
    Version List=EventLogging110.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StringBuilder@1004 : DotNet "'mscorlib'.System.Text.StringBuilder";
      StringWriter@1003 : DotNet "'mscorlib'.System.IO.StringWriter";
      StringReader@1002 : DotNet "'mscorlib'.System.IO.StringReader";
      JsonTextWriter@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextWriter";
      JsonTextReader@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextReader";

    LOCAL PROCEDURE Initialize@15();
    VAR
      Formatting@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Formatting";
    BEGIN
      StringBuilder := StringBuilder.StringBuilder;
      StringWriter := StringWriter.StringWriter(StringBuilder);
      JsonTextWriter := JsonTextWriter.JsonTextWriter(StringWriter);
      JsonTextWriter.Formatting := Formatting.Indented;
    END;

    PROCEDURE StartJSon@1();
    BEGIN
      IF ISNULL(StringBuilder) THEN
        Initialize;
      JsonTextWriter.WriteStartObject;
    END;

    PROCEDURE StartJSonArray@14(ArrayName@10000200 : Text);
    BEGIN
      IF ISNULL(StringBuilder) THEN
        Initialize;
      IF ArrayName <> '' THEN
        JsonTextWriter.WritePropertyName(ArrayName);
      JsonTextWriter.WriteStartArray;
    END;

    PROCEDURE AddJSonBranch@6(BranchName@1001 : Text);
    BEGIN
      JsonTextWriter.WritePropertyName(BranchName);
      JsonTextWriter.WriteStartObject;
    END;

    PROCEDURE AddToJSon@4(VariableName@1001 : Text;Variable@1002 : Variant);
    BEGIN
      JsonTextWriter.WritePropertyName(VariableName);
      JsonTextWriter.WriteValue(FORMAT(Variable,0,9));
    END;

    PROCEDURE EndJSonBranch@7();
    BEGIN
      JsonTextWriter.WriteEndObject;
    END;

    PROCEDURE EndJSonArray@19();
    BEGIN
      JsonTextWriter.WriteEndArray;
    END;

    PROCEDURE EndJSon@3();
    BEGIN
      JsonTextWriter.WriteEndObject;
    END;

    PROCEDURE GetJSon@20() JSon : Text;
    BEGIN
      JSon := StringBuilder.ToString;
      Initialize;
    END;

    PROCEDURE SaveJSon@8(VAR TempBlob@1000 : Record 99008535);
    VAR
      OutStream@1001 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      OutStream.WRITETEXT(GetJSon);
    END;

    PROCEDURE ReadJSon@5(VAR String@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";VAR TempDataExchField@1002 : TEMPORARY Record 1221);
    VAR
      JsonToken@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      PrefixArray@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      PrefixString@1005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      PropertyName@1008 : Text;
      ColumnNo@1003 : Integer;
      InArray@1007 : ARRAY [250] OF Boolean;
    BEGIN
      PrefixArray := PrefixArray.CreateInstance(GETDOTNETTYPE(String),250);
      StringReader := StringReader.StringReader(String);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.StartObject) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.StartArray) = 0 :
            BEGIN
              InArray[JsonTextReader.Depth + 1] := TRUE;
              ColumnNo := 0;
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.StartConstructor) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            BEGIN
              PrefixArray.SetValue(JsonTextReader.Value,JsonTextReader.Depth - 1);
              IF JsonTextReader.Depth > 1 THEN BEGIN
                PrefixString := PrefixString.Join('.',PrefixArray,0,JsonTextReader.Depth - 1);
                IF PrefixString.Length > 0 THEN
                  PropertyName := PrefixString.ToString + '.' + FORMAT(JsonTextReader.Value,0,9)
                ELSE
                  PropertyName := FORMAT(JsonTextReader.Value,0,9);
              END ELSE
                PropertyName := FORMAT(JsonTextReader.Value,0,9);
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.String) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Integer) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Float) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Boolean) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Date) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Bytes) = 0 :
            BEGIN
              TempDataExchField."Data Exch. No." := JsonTextReader.Depth;
              TempDataExchField."Line No." := JsonTextReader.LineNumber;
              TempDataExchField."Column No." := ColumnNo;
              TempDataExchField."Node ID" := PropertyName;
              TempDataExchField.Value := FORMAT(JsonTextReader.Value,0,9);
              TempDataExchField."Data Exch. Line Def Code" := JsonTextReader.TokenType.ToString;
              TempDataExchField.INSERT;
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndConstructor) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndArray) = 0 :
            InArray[JsonTextReader.Depth + 1] := FALSE;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndObject) = 0 :
            IF JsonTextReader.Depth > 0 THEN
              IF InArray[JsonTextReader.Depth] THEN ColumnNo += 1;
        END;
    END;

    PROCEDURE ReadFirstJSonValue@11(VAR String@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";ParameterName@1002 : Text) ParameterValue : Text;
    VAR
      JsonToken@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      PropertyName@1008 : Text;
    BEGIN
      StringReader := StringReader.StringReader(String);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            PropertyName := FORMAT(JsonTextReader.Value,0,9);
          (PropertyName = ParameterName) AND NOT ISNULL(JsonTextReader.Value) :
            BEGIN
              ParameterValue := FORMAT(JsonTextReader.Value,0,9);
              EXIT;
            END;
        END;
    END;

    BEGIN
    END.
  }
}

